{"version":3,"sources":["types/Filter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","TodoList","todos","selectedTodoId","onEyeClick","className","map","todo","id","completed","title","isSelected","cn","type","onClick","TodoFilter","query","setOption","setQuery","onChange","e","target","value","All","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","selectedTodo","useState","loading","setLoading","user","setUser","userId","useEffect","getUser","finally","name","email","href","App","setTodos","setSelectedTodo","sortBy","setSortBy","todosFromServer","fiteredTodos","prepearedQuery","trim","toLowerCase","filter","includes","filterFunc","qu","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2b5df83.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number | undefined;\n  onEyeClick: React.Dispatch<React.SetStateAction<Todo | null>>;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  onEyeClick,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, completed, title } = todo;\n        const isSelected = id === selectedTodoId;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={cn({ 'has-background-info-light': isSelected })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onEyeClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={cn('far', {\n                    'fa-eye': !isSelected,\n                    'fa-eye-slash': isSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { Filter } from '../../types/Filter';\n\ntype Props = {\n  query: string;\n  setQuery: (qu: string) => void;\n  setOption: React.Dispatch<React.SetStateAction<Filter>>;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  setOption,\n  setQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={e => setOption(e.target.value as Filter)}\n        >\n          <option value={Filter.All}>All</option>\n          <option value={Filter.Active}>Active</option>\n          <option value={Filter.Completed}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  onClose: React.Dispatch<React.SetStateAction<Todo | null>>;\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ onClose, selectedTodo }) => {\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    title,\n    id,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, [userId]);\n\n  const { name, email } = user || {};\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={`has-text-${completed\n                ? 'success'\n                : 'danger'}`}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${email}`}>\n                {name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filter } from './types/Filter';\n\ntype SortType = {\n  sortBy: Filter;\n  query: string;\n};\n\nconst filterFunc = (todos: Todo[], { sortBy, query }: SortType) => {\n  let res = [...todos];\n  const prepearedQuery = query.trim().toLowerCase();\n\n  switch (sortBy) {\n    case Filter.Active:\n      res = res.filter(todo => !todo.completed);\n      break;\n\n    case Filter.Completed:\n      res = res.filter(todo => todo.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  if (prepearedQuery) {\n    return res\n      .filter(todo => todo.title.toLowerCase().includes(prepearedQuery));\n  }\n\n  return res;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [sortBy, setSortBy] = useState<Filter>(Filter.All);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos().then(todosFromServer => {\n      setTodos(todosFromServer);\n      setLoading(false);\n    });\n  }, []);\n\n  const fiteredTodos = filterFunc(todos, { sortBy, query });\n\n  const hendleSetQuerty = (qu: string) => {\n    if (qu.trim() !== '' || qu === '') {\n      setQuery(qu);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setOption={setSortBy}\n                query={query}\n                setQuery={hendleSetQuerty}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n              {!loading && todos.length > 0 && (\n                <TodoList\n                  todos={fiteredTodos}\n                  selectedTodoId={selectedTodo?.id}\n                  onEyeClick={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}